# default case
[include]
  path = ~/.gitalias.txt
  path = ~/.config/git/.gitconfig-personal

[includeIf "gitdir:**/cr/**/.git"]
  path = ~/.config/git/.gitconfig-other

[includeIf "gitdir:**/hero/**/.git"]
  path = ~/.config/git/.gitconfig-hero
[includeIf "gitdir:~/hero/"]
  path = ~/.config/git/.gitconfig-hero

[includeIf "gitdir:**/company/**/.git"]
  path = ~/.config/git/.gitconfig-company
[includeIf "gitdir:~/company/"]
  path = ~/.config/git/.gitconfig-company

[color]
  # ui = true is a superset of all the more specific color options
  #  as documented at http://book.git-scm.com/5_customizing_git.html
  # When set to always, always use colors in all git commands which are capable of colored output.
  # When false, never. When set to true or auto, use colors only when the output is to the terminal.
  # When more specific variables of color.* are set, they always take precedence over this setting.
  # Defaults to false.
	ui = true
	# diff = auto
	status = auto
	branch = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
	meta = yellow
	frag = magenta bold
	old = red bold
	new = green bold
	commit = yellow bold
	whitespace = red reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[advice]
  statusHints = false

[gui]
  fontdiff = -family Monaco -size 16 -weight normal -slant roman -underline 0 -overstrike 0

[core]
	excludesfile = ~/.gitignore
  quotepath = false
  # line endings
  # force LF during add
  autocrlf = input
  # autocrlf = true # for windows to convert to CRLF on checkout and LF on add
  # warn but allow line ending conversion to proceed
  safecrlf = warn
  # prevent crlf (then you will have to deal with the problem -- dos2unix, etc)
  #safecrlf = true
	editor = subl -n -w
	pager = diff-so-fancy | less --tabs=4 -RFX
	filemode = true
	hooksPath = ~/.githooks
  #editor = subl -w

[alias]
  # most commonly used
  this = !git init && git add -A && git commit -m \"Initial commit.\"
  amend = commit --amend --no-edit
  log-line = log --oneline --graph --decorate
  unstage = reset HEAD --
  last = log -1 HEAD
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
  cm = !git add -A && git commit -m
  co = checkout
  cob = checkout -b
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive
  # This commits everything in working directory and then does a hard reset to remove that commit.
  # Backup and reset
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  # Soft reset your existing branch to 1 before your merge
  undolastcommit = reset --soft HEAD^
  # http://haacked.com/archive/2014/07/28/github-flow-aliases/

  cm = !git add -A && git commit -m
  save = !git add -A && git commit -m 'SAVEPOINT'
  wip = !git add -u && git commit -m "WIP"
  undo = reset HEAD~1 --mixed
  amend = commit -a --amend
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
  # TODO: Test this fix
  # bclean = "!f() { branches=$(git branch --merged ${1-master} | grep -v " ${1-master}$"); [ -z \"$branches\" ] || git branch -d $branches; }; f"`
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

  d = diff --color-words
  cam = commit -a -m
  upm = !git fetch upstream && git merge upstream/master
  # new standard to replace the deprecated git-up gem package:
  cob = checkout -b
  up = pull --rebase --autostash

  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

  # Often during a merge you know you want to take a file from one side wholesale.
  # The following aliases let you pick a file(s) from the current branch or the merged branch respectively:
  ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

  # least used
  ec = config --global -e
  br = branch -a
  s = status -s -u
  cl = log --stat -C -2
  c = commit
  dh = diff HEAD
  dc = diff --staged
  dw = diff --word-diff
  dcw = diff --color-words
  dm = !git diff | subl
  dv = !git diff | vim
  who = shortlog -s --
  ph = push
  pl = pull
  lp = log -p
  lod = log --oneline --decorate
  lg = log --graph
  lpo = log --pretty=oneline --abbrev-commit --graph --decorate --all
  l1 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  l2 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  spull = !git-svn fetch && git-svn rebase
  spush = !git-svn dcommit
  sync = !git pull && git push
  es = !git pull --rebase && git push
  lf = log --pretty=fuller
  ignorechanges = update-index --assume-unchanged
  noticechanges = update-index --no-assume-unchanged
  gc-ap = gc --aggressive --prune
  listconf = config --global --list
  lsm = log -M --stat
  hse = log --stat -5
  diffall = diff HEAD
  logr = log -M
  logr2 = log --stat -M -2
  logit = log --stat -M
  scrub = !git reset --hard && git clean -fd
  pub = !git pub checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf
  cs = status
  rv = remote -v
  lwr = log --stat -C
  pur = pull --rebase
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  orphank = !gitk --all `git reflog | cut -c1-7`&
  orphanl = !git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -c1-7`
  k = !exec gitk --all&
  testecho1 = !sh -c 'echo with slash: zero=$0 one=$1 two=$2' -
  # te1 RESULT: with slash: zero=- one=A two=B
  testecho2 = !sh -c 'echo without slash: zero=$0 one=$1 two=$2'
  # te2 RESULT: without slash: zero=A one=B two=C
  st = status
  l = log --stat -C
  ll = log --stat -C -3
  servehere = daemon --verbose --informative-errors --reuseaddr --export-all --base-path=. --enable=receive-pack
  purgeme = !git clean -fd && git reset --hard
  prunenow = gc --prune=now
  ri = rebase --interactive --autosquash
  lol = log --pretty=oneline --graph --abbrev-commit --all
  blg = log --graph --decorate --all --abbrev-commit --pretty=oneline
  slog = log --graph --simplify-by-decoration --all --abbrev-commit --pretty=oneline
  lgso = log --graph --date=short --pretty=format:'%C(yellow)%h%Creset %cn%x09%cd %s%C(green bold)%d'
  ro = !git fetch origin && git reset --hard origin/master
  shorten = "!sh -c 'curl -i http://git.io -F url=$1' -"
  pushnotes = !sh -c 'git push $1 refs/notes/*' -
  fetchnotes = !sh -c 'git fetch $1 refs/notes/*:refs/notes/*' -
  showignored = clean -ndX
  showignored2 = ls-files --others --ignored --exclude-standard
  showignored3 = !git ls-files -v | grep "^[[:lower:]]"
  showuntracked = ls-files --others --exclude-standard
  rmmissing = !git rm $(git ls-files --deleted)
  mergekeepoursonly = merge -s ours
  listunstaged = diff --name-status
  liststaged = diff --name-status --staged
  listhistory = log --name-status
  logn = log --oneline --name-only
  busypeople = shortlog -6
  busythisweek = shortlog --since=one.week.ago
  configpushtracking = config push.default tracking
  configpushnothing = config push.default nothing
  configpushmatching = config push.default matching
  configpushcurrent = config push.default current

  nr = "!sh -c 'git init $0'"
  echoparam1 = "!sh -c 'echo $0'"
  #testshfunction = "!function gitme() { git init $1; cd $1; }; gitme"

  fixup = "!sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
  squash = "!sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
  ccfq = "!sh -c 'git add $1 && git commit -m\"Placeholder\"' -"
  sno = show --name-only
  logsimple = log --graph --abbrev-commit --pretty=oneline --all --decorate
	graph = log --graph --oneline --decorate
  # Setup Git Submodules To Auto-Pull
	pull = "!f(){ git pull \"$@\" && git submodule update --init --recursive; }; f"
[apply]
  whitespace = nowarn

[rerere]
  # Enable the recording of resolved conflicts, so that identical hunks can be resolved automatically later on
  enabled = 1

[difftool]
  prompt = false

[diff]
  tool = icdiff
  # tool = vimdiff
	color = true
	guitool = meld
  # Same end result but much easier to read
	algorithm = patience

[difftool "icdiff"]
    cmd = icdiff --head=5000 --highlight --line-numbers -L \"$BASE\" -L \"$REMOTE\" \"$LOCAL\" \"$REMOTE\"

[icdiff]
  options = --highlight --line-numbers

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[mergetool]
  prompt = false
  keepBackup = false

[merge]
	tool = meld
  # Always show a diffstat at the end of a merge
  stat = true
  conflictstyle = diff3

# [merge]
#     tool = pycharm
# [mergetool "pycharm"]
#     cmd = /usr/local/bin/charm merge "$LOCAL" "$REMOTE" "$BASE" "$MERGED"

# [branch]
    # Automatically set up pull to be --rebase
    # autosetuprebase = always

# [credential]
# 	# helper = osxkeychain
# 	useHttpPath = true
# 	helper = store

[filter "tabspace"]
  clean = expand -t 4

[pull]
  rebase = false

[rebase]
  autosquash = true

[push]
  # push the current branch to update a branch with the same name on the receiving end. Works in both central and non-central workflows.
  default = current
  # Push only the current branch
  # default = simple
	followTags = true

[init]
  templatedir = ~/.git-templates
	defaultBranch = master

[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[gpg]
	program = gpg
[commit]
	gpgsign = true
[format]
	signoff = true
  pretty = "%H %ci %ce %ae %d %s"
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
# [fetch]
# 	recurseSubmodules = true
